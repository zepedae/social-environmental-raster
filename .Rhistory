geometry = TRUE) %>% dply::select(geometry, GEOID), by = "GEOID") %>% mutate(id = 1:nrow(vars_df))
# create raster that has a unique row id for each cell
# (I can't use the GEOID because it's too large of a number to work with later on)
raster_df <- vars_df %>% dplyr::select(pop_dens, prop_a, prop_b, prop_l, prop_n, prop_w, GEOID) %>%
left_join(get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID), by = "GEOID") %>% mutate(id = 1:nrow(vars_df))
raster_df
View(raster_df)
View(vars)
View(vars_geom)
# calculate proportions of each racial/ethnic group in block group
vars_df <- vars_df %>% mutate(prop_a = race_A/pop, prop_b = race_B/pop,
prop_l = race_L/pop, prop_n = race_N/pop,
prop_w = race_W/pop) %>%
dplyr::select(prop_a, prop_b, prop_l, prop_b, prop_n,
prop_w, pop_dens, GEOID)
# calculate population density for each block group
vars_df <- vars_df %>% mutate(pop_dens = pop/(area/1000000))
vars_df <- vars_list %>% reduce(left_join, by="GEOID") %>% as.data.frame()
# calculate population density for each block group
vars_df <- vars_df %>% mutate(pop_dens = pop/(area/1000000))
# calculate proportions of each racial/ethnic group in block group
vars_df <- vars_df %>% mutate(prop_a = race_A/pop, prop_b = race_B/pop,
prop_l = race_L/pop, prop_n = race_N/pop,
prop_w = race_W/pop) %>%
dplyr::select(prop_a, prop_b, prop_l, prop_b, prop_n,
prop_w, pop_dens, GEOID, med_inc)
# calculate population density for each block group
vars_df <- vars_df %>% mutate(pop_dens = as.numer(pop/(area/1000000)))
# calculate population density for each block group
vars_df <- vars_df %>% mutate(pop_dens = as.number(pop/(area/1000000)))
# calculate population density for each block group
vars_df <- vars_df %>% mutate(pop_dens = as.numeric(pop/(area/1000000)))
vars_df <- vars_list %>% reduce(left_join, by="GEOID") %>% as.data.frame()
# calculate population density for each block group
vars_df <- vars_df %>% mutate(pop_dens = as.numeric(pop/(area/1000000)))
vars_df <-
#################   Calculate Social Metrics   ##################
# calculate population density for each block group
vars_df <- vars_list %>% reduce(left_join, by="GEOID") %>% as.data.frame() %>%
mutate(pop_dens = as.numeric(pop/(area/1000000)),
prop_a = race_A/pop, prop_b = race_B/pop,
prop_l = race_L/pop, prop_n = race_N/pop,
prop_w = race_W/pop) %>%
dplyr::select(prop_a,prop_b, prop_l, prop_b, prop_n,
prop_w, pop_dens, med_inc, GEOID)
# get geometry and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>% left_join(vars_df)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(id = 1:nrow()) %>%
left_join(vars_df)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(id = 1:nrow(.)) %>%
left_join(vars_df)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(id = 1:nrow) %>%
left_join(vars_df)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(id = 1:nrow(.)) %>%
left_join(vars_df)
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$id))
spdf <- sf::as_Spatial(st_geometry(vars_geom$geometry), IDs = as.character(vars_geom$id))
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),]
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$id))
class(spdf)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(id = 1:nrow(.)) %>%
left_join(vars_df)
spdf <- vars_geom %>% filter(!is.na(geometry))
spdf <- vars_geom %>% filter(!is.na(geometry))
spdf <- vars_geom %>% dplyr::filter(!is.na(geometry))
sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$id))
spdf <- vars_geom %>% filter(na.omit(geometry))
vars_geom$geometry
spdf <- vars_geom %>% as_Spatial(st_geometry())
spdf <- vars_geom %>% sf::as_Spatial(st_geometry())
spdf <- vars_geom %>% sf::as_Spatial(st_geometry(.))
spdf <- vars_geom %>% sf::as_Spatial(st_geometry(geometry))
spdf <- vars_geom %>% sf::as_Spatial(st_geometry())
spdf <- vars_geom %>% sf::as_Spatial(st_geometry(.))
install.packages("spdplyr")
library(spdplyr)
spdf <- vars_geom %>% filter(!is.na(geometry))
spdf <- vars_geom %>% filter(na.omit(geometry))
spdf <- vars_geom %>% spdplyr::filter(na.omit(geometry))
spdf <- vars_geom %>% filter.Spatial(na.omit(geometry))
library(spdplyr)
spdf <- vars_geom %>% spdlyr::filter(na.omit(geometry))
spdf <- vars_geom %>% spdplyr::filter(na.omit(geometry))
library(spdplyr)
spdf <- vars_geom %>% filter(na.omit(geometry))
spdf <- vars_geom %>% filter(!is.na(geometry))
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),] # removes two empty geos
??tidyverse
as_Spatial(st_geometry(vars_geom)
)
spdf <- vars_geom %>% mutate(geometry = as_Spatial(st_geometry(vars_geom))
spdf <- vars_geom %>% mutate(geometry = as_Spatial(st_geometry(vars_geom)))
spdf <- vars_geom %>% spdplyr::mutate(geometry = as_Spatial(st_geometry(vars_geom)))
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$id))
data <- vars_geom %>% select(-geometry) %>% as.data.frame() %>%
mutate()
data <- vars_geom %>% select(-geometry) %>% as.data.frame() #%>%
data <- vars_geom
data$geometry <- NULL
View(data)
data$id <- data$id %>% mutate(as.character())
data$id <- data$id %>% mutate(as.character(.))
data <- data %>% mutate(id = as.character(id))
data <- vars_geom
data$geometry <- NULL
data <- data %>% mutate(row_names = unique(as.character(id)))
data <- data %>% mutate(row_names = unique(as.character(id)))
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
sp_df@data$ID
View(sp_df)
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
library(geosphere)
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
width <- distm(c(lon1,lat1), c(lon2,lat1), fun=distVincentyEllipsoid)
rows <- length/30 # 30 m cell width/height
cols <- width/30
raster_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
View(raster_temp)
rast_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
plot(rast_temp)
data <- data %>% mutate(row_names = unique(as.integer(id))) # rasterize needs row_names
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
# create raster template that has same approximate dimensions as SPDF
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
width <- distm(c(lon1,lat1), c(lon2,lat1), fun=distVincentyEllipsoid)
rows <- length/30 # 30 m cell width/height
cols <- width/30
rast_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$id)
rast <- as.factor(rast) # move id from layer to attributes
attributes <- levels(raster)[[1]] # create df with ids
attributes <- merge(attributes, data, by = "id") # merge id df with the SPDF
attributes <- levels(rast)[[1]] # create df with ids
attributes <- merge(attributes, data, by = "id") # merge id df with the SPDF
View(attributes)
sp_df@data$id <- as.integer(sp_df@data$id) # coerce ID to integer
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$id)
View(rast)
rast
View(sp_df)
rast <- as.factor(rast) # move id from layer to attributes
rast <- as.factor(rast) # move id from layer to attributes
rast
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$ID))
data <- vars_geom
data$geometry <- NULL
data <- data %>% mutate(row_names = unique(as.integer(ID))) # rasterize needs row_names
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
# create raster template that has same approximate dimensions as SPDF
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
width <- distm(c(lon1,lat1), c(lon2,lat1), fun=distVincentyEllipsoid)
rows <- length/30 # 30 m cell width/height
cols <- width/30
rast_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
sp_df@data$ID <- as.integer(sp_df@data$ID) # coerce ID to integer
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$ID)
rast
rast <- rasterize(sp_df, rast_temp) , field = sp_df@data$ID)
rast <- rasterize(sp_df, rast_temp) #, field = sp_df@data$ID)
?rasterize
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$ID) #burn-in geo value
rast <- as.factor(rast) # move id from layer to attributes
?as.factor
rast
attributes <- levels(rast)[[1]] # create df with ids
attributes <- merge(attributes, data, by = "ID") # merge id df with the SPDF
attributes$geometry <- NULL
levels(rasterFactor) <- attributes # assign the attributes to the existing raster
levels(rast) <- attributes # assign the attributes to the existing raster
final_rast <- deratify(rast) # move from attributes to layers
plot(final_rast)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),na.omit(vars$GEOID)] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$ID))
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$ID))
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$ID))
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$ID))
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom), IDs = as.character(vars_geom$ID))
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),!vars_geom$GEOID] # removes two empty geos
View(vars_geom)
View(data)
length(intersect(data$ID, data$row_names))
data <- subset(vars_geom, select = -c("geometry","GEOID")
data <- subset(vars_geom, select = -c("geometry","GEOID"))
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
# create raster template that has same approximate dimensions as SPDF
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
width <- distm(c(lon1,lat1), c(lon2,lat1), fun=distVincentyEllipsoid)
rows <- length/30 # 30 m cell width/height
cols <- width/30
rast_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$ID) #burn-in geo value
View(sp_df)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),!vars_geom$GEOID] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),!vars_geom$GEOID] # removes two empty geos
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry), -"GEOID"] # removes two empty geos
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry), -GEOID] # removes two empty geos
View(vars_geom)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry), -vars_geom$GEOID] # removes two empty geos
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),
!colnames(vars_geom)== "GEOID"] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
vars_geom
data$geometry <- NULL
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
# create raster template that has same approximate dimensions as SPDF
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
width <- distm(c(lon1,lat1), c(lon2,lat1), fun=distVincentyEllipsoid)
rows <- length/30 # 30 m cell width/height
cols <- width/30
rast_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$ID) #burn-in geo value
rast <- as.factor(rast) # move id from layer to attributes
attributes <- levels(rast)[[1]] # create df with ids
attributes <- merge(attributes, data, by = "ID") # merge id df with the SPDF
attributes$geometry <- NULL
levels(rast) <- attributes # assign the attributes to the existing raster
final_rast <- deratify(rast) # move from attributes to layers
plot(final_rast)
rast_temp
rast
sp_df
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
data$geometry <- NULL
data
vars_geom[, c("geometry", "ID")])
vars_geom[, c("geometry", "ID")]
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
spdf
data <- select(vars_geom, select=-c("geometry"))
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),
!colnames(vars_geom)== "GEOID"] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
data <- subset(vars_geom, select=-c("geometry"))
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
data <- subset(vars_geom, select=-("geometry"))
data <- subset(vars_geom, select=("geometry"))
data <- subset(vars_geom, select=!("geometry"))
data <- subset(vars_geom, select=-c("geometry"))
data <- select(vars_geom, -geometry)
data <- subset(vars_geom, select= -"geometry")
data <- vars_geom[, -colnames(vars_geom$geometry)]
data <- vars_geom[, -colnames(vars_geom) == "geometry"]
data <- vars_geom[, -(colnames(vars_geom) == "geometry")]
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
data
# create raster template that has same approximate dimensions as SPDF
extent <- bbox(sp_df)
lon1 <- extent[1][1]
lon2 <- extent[3][1]
lat1 <- extent[2][1]
lat2 <- extent[4][1]
length <- distm(c(lon1,lat1), c(lon1,lat2), fun=distVincentyEllipsoid)
width <- distm(c(lon1,lat1), c(lon2,lat1), fun=distVincentyEllipsoid)
rows <- length/30 # 30 m cell width/height
cols <- width/30
rast_temp <- raster(xmn=lon1, xmx=lon2, ymn=lat1, ymx=lat2,
crs="+init=epsg:4269", ncol = cols, nrows = rows)
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$ID) #burn-in geo value
rast <- as.factor(rast) # move id from layer to attributes
attributes <- levels(rast)[[1]] # create df with ids
attributes <- merge(attributes, data, by = "ID") # merge id df with the SPDF
attributes$geometry <- NULL
levels(rast) <- attributes # assign the attributes to the existing raster
final_rast <- deratify(rast) # move from attributes to layers
plot
plot(final_rast)
citation("raster")
hist(final_rast@data$pop_dens)
final_rast@data$pop_dens
final_rast
hist(final_rast[7]@data)
hist(final_rast[[6]]$pop_dens)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),
!colnames(vars_geom)== "GEOID"] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.character(vars_geom$ID))
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
data <- data %>% mutate(row_names = unique(as.integer(ID))) # rasterize needs row_names
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
library(tidycensus)
library(tidyverse)
library(sf)
library(sp)
library(raster)
library(terra)
library(geosphere)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),
!colnames(vars_geom)== "GEOID"] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]), IDs = as.integer(vars_geom$ID))
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
data <- data %>% mutate(row_names = unique(as.integer(ID))) # rasterize needs row_names
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
View(data)
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]),
IDs = as.integer(vars_geom$ID))
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]),
IDs = as.character(vars_geom$ID))
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
View(data)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),
!colnames(vars_geom)== "GEOID"] # removes two empty geos
View(vars_geom)
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
View(data)
# get geometry, add row id (not GEOID bc too big), and combine with value data frame
vars_geom <- get_acs(geography = "block group", state = "IL",
variables = "B01003_001", county = c("Cook County", "Kane County",
"Dupage County","McHenry",
"Lake", "Will County"),
geometry = TRUE) %>% dplyr::select(geometry, GEOID) %>%
mutate(ID = 1:nrow(.)) %>%
left_join(vars_df)
# create a SpatialPointsDataFrame to be rasterized
vars_geom <- vars_geom[na.omit(vars_geom$geometry),
!colnames(vars_geom)== "GEOID"] # removes two empty geos
spdf <- sf::as_Spatial(st_geometry(vars_geom[, c("geometry", "ID")]),
IDs = as.character(vars_geom$ID))
data <- vars_geom[, !colnames(vars_geom) == "geometry"]
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
View(data)
data <- as.data.frame(vars_geom)
View(data)
data <- subset(vars_geom, select = -"geometry")
data <- subset(vars_geom, select = -vars_geom)
data <- subset(vars_geom, select = -vars_geom$geometry)
?st_set_geometry
data <- st_drop_geometry(data)
View(data)
data <- st_drop_geometry(vars_geom)
View(data)
sp_df <- sp::SpatialPolygonsDataFrame(spdf, data = data)
sp_df <- spTransform(sp_df, CRS("+init=epsg:4269"))
rast <- rasterize(sp_df, rast_temp, field = sp_df@data$ID) #burn-in geo value
rast <- as.factor(rast) # move id from layer to attributes
attributes <- levels(rast)[[1]] # create df with ids
attributes <- merge(attributes, data, by = "ID") # merge id df with the SPDF
attributes$geometry <- NULL
levels(rast) <- attributes # assign the attributes to the existing raster
final_rast <- deratify(rast) # move from attributes to layers
plot(final_rast)
library(sf)
# loop through each cell calculating the proportion of each habitat type in 1 km
values_df <- data.frame("distProp" = rep(NA, ncell(env_rast)),
"agProp" = rep(NA, ncell(env_rast)),
"natProp" = rep(NA, ncell(env_rast)))
